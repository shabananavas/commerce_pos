diff --git a/modules/currency_denomination/commerce_pos_currency_denomination.info b/modules/currency_denomination/commerce_pos_currency_denomination.info
new file mode 100644
index 0000000..7b7aa50
--- /dev/null
+++ b/modules/currency_denomination/commerce_pos_currency_denomination.info
@@ -0,0 +1,6 @@
+name = Commerce POS Currency Denomination
+description = Provides a interface for configuring currency denominations.
+core = 7.x
+package = Commerce POS
+
+dependencies[] = commerce_pos
diff --git a/modules/currency_denomination/commerce_pos_currency_denomination.install b/modules/currency_denomination/commerce_pos_currency_denomination.install
new file mode 100644
index 0000000..717b3a5
--- /dev/null
+++ b/modules/currency_denomination/commerce_pos_currency_denomination.install
@@ -0,0 +1,150 @@
+<?php
+
+/**
+ * @file
+ * Schema and install hooks for commerce_pos_currency_denomination.
+ */
+
+/**
+ * Implements hook_schema().
+ */
+function commerce_pos_currency_denomination_schema() {
+  $schema['commerce_pos_currency_denomination_type'] = array(
+    'description' => 'The base table for a currency denomination type.',
+    'fields' => array(
+      'currency_id' => array(
+        'description' => 'The primary identifier for a currency denomination type.',
+        'type' => 'serial',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+      ),
+      'currency_code' => array(
+        'description' => 'The human-readable name of the currency denomination type.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+    ),
+    'primary key' => array('currency_id'),
+  );
+
+  $schema['commerce_pos_currency_denomination'] = array(
+    'description' => 'The base table for adding a currency denomination.',
+    'fields' => array(
+      'denomination_id' => array(
+        'description' => 'The primary identifier for a currency denomination.',
+        'type' => 'serial',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+      ),
+      'currency_id' => array(
+        'description' => 'The primary identifier from the currency denomination type table.',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'denomination_name' => array(
+        'description' => 'The machine name of the denomination eg. penny.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'denomination_title' => array(
+        'description' => 'The human-readable name of the denomination eg. Penny.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'denomination_amount' => array(
+        'description' => 'The amount of the currency denomination eg. 1.',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+    ),
+    'indexes' => array(
+      'currency_id_denomination_id' => array('currency_id', 'denomination_id'),
+    ),
+    'primary key' => array('denomination_id'),
+  );
+
+  return $schema;
+}
+
+/**
+ * Implements hook_install().
+ */
+function commerce_pos_currency_denomination_install() {
+  _commerce_pos_currency_denomination_add_default_denominations();
+}
+
+/**
+ * Add our default US dollar currency denomination type.
+ */
+function _commerce_pos_currency_denomination_add_default_denominations() {
+  $currency_id = db_insert('commerce_pos_currency_denomination_type')
+    ->fields(array(
+      'currency_code' => 'USD',
+    ))
+    ->execute();
+
+  // Now add all the denominations for the US dollar.
+  $currency_denominations = array(
+    'penny' => array(
+      'title' => t('Penny'),
+      'amount' => 1,
+    ),
+    'nickel' => array(
+      'title' => t('Nickel'),
+      'amount' => 5,
+    ),
+    'dime' => array(
+      'title' => t('Dime'),
+      'amount' => 10,
+    ),
+    'quarter' => array(
+      'title' => t('Quarter'),
+      'amount' => 25,
+    ),
+    '1' => array(
+      'title' => t('$1'),
+      'amount' => 100,
+    ),
+    '5' => array(
+      'title' => t('$5'),
+      'amount' => 500,
+    ),
+    '10' => array(
+      'title' => t('$10'),
+      'amount' => 1000,
+    ),
+    '20' => array(
+      'title' => t('$20'),
+      'amount' => 2000,
+    ),
+    '50' => array(
+      'title' => t('$50'),
+      'amount' => 5000,
+    ),
+    '100' => array(
+      'title' => t('$100'),
+      'amount' => 10000,
+    ),
+  );
+
+  foreach ($currency_denominations as $name => $value) {
+    db_insert('commerce_pos_currency_denomination')
+      ->fields(array(
+        'currency_id' => $currency_id,
+        'denomination_name' => $name,
+        'denomination_title' => $value['title'],
+        'denomination_amount' => $value['amount'],
+      ))
+      ->execute();
+  }
+}
diff --git a/modules/currency_denomination/commerce_pos_currency_denomination.module b/modules/currency_denomination/commerce_pos_currency_denomination.module
new file mode 100644
index 0000000..56ba24b
--- /dev/null
+++ b/modules/currency_denomination/commerce_pos_currency_denomination.module
@@ -0,0 +1,234 @@
+<?php
+
+/**
+ * @file
+ * Hook implementations and related functions.
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function commerce_pos_currency_denomination_menu() {
+  $items = array();
+
+  $items['admin/commerce/config/pos/denomination'] = array(
+    'title' => 'Configure Currency Denominations',
+    'description' => 'Configure currency denominations for the cash count section.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_pos_currency_denomination_settings_form'),
+    'access callback' => '_commerce_pos_access_check',
+    'access arguments' => array('process commerce pos sales'),
+    'file' => 'includes/commerce_pos_currency_denomination.admin.inc',
+  );
+
+  $items['admin/commerce/config/pos/denomination-type/add'] = array(
+    'title' => 'Add Currency Denomination Type',
+    'type' => MENU_VISIBLE_IN_BREADCRUMB,
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_pos_currency_add_denomination_type_form'),
+    'access callback' => '_commerce_pos_access_check',
+    'access arguments' => array('process commerce pos sales'),
+    'file' => 'includes/commerce_pos_currency_denomination.admin.inc',
+  );
+
+  $items['admin/commerce/config/pos/denomination-type/%/delete'] = array(
+    'title' => 'Delete Currency Denomination Type',
+    'page callback' => 'drupal_get_form',
+    'type' => MENU_VISIBLE_IN_BREADCRUMB,
+    'page arguments' => array(
+      'commerce_pos_currency_delete_denomination_type_form',
+      5
+    ),
+    'access callback' => '_commerce_pos_access_check',
+    'access arguments' => array('process commerce pos sales'),
+    'file' => 'includes/commerce_pos_currency_denomination.admin.inc',
+  );
+
+  $items['admin/commerce/config/pos/denomination-type/%/denomination/add'] = array(
+    'title' => 'Add Denomination',
+    'page callback' => 'drupal_get_form',
+    'type' => MENU_VISIBLE_IN_BREADCRUMB,
+    'page arguments' => array('commerce_pos_currency_add_denomination_form', 5),
+    'access callback' => '_commerce_pos_access_check',
+    'access arguments' => array('process commerce pos sales'),
+    'file' => 'includes/commerce_pos_currency_denomination.admin.inc',
+  );
+
+  $items['admin/commerce/config/pos/denomination-type/%/denomination/view'] = array(
+    'title' => 'View Denominations',
+    'page callback' => 'commerce_pos_currency_view_denominations',
+    'type' => MENU_VISIBLE_IN_BREADCRUMB,
+    'page arguments' => array(5),
+    'access callback' => '_commerce_pos_access_check',
+    'access arguments' => array('process commerce pos sales'),
+    'file' => 'includes/commerce_pos_currency_denomination.admin.inc',
+  );
+
+  $items['admin/commerce/config/pos/denomination-type/%/denomination/%/delete'] = array(
+    'title' => 'Delete Denomination',
+    'page callback' => 'drupal_get_form',
+    'type' => MENU_VISIBLE_IN_BREADCRUMB,
+    'page arguments' => array(
+      'commerce_pos_currency_delete_denomination_form',
+      5,
+      7
+    ),
+    'access callback' => '_commerce_pos_access_check',
+    'access arguments' => array('process commerce pos sales'),
+    'file' => 'includes/commerce_pos_currency_denomination.admin.inc',
+  );
+
+  return $items;
+}
+
+/**
+ * Returns all the denominations from the db for a currency code.
+ *
+ * @param array $currency_codes
+ *   An array of currency codes.
+ *
+ * @return array
+ *   Returns the denominations from the db keyed on the currency ID and
+ * denomination ID.
+ */
+function commerce_pos_currency_denomination_get_denominations($currency_codes = array()) {
+  $denominations = array();
+
+  // Let's first grab all the denominations under the given currency codes.
+  $query = db_select('commerce_pos_currency_denomination', 'd');
+  $query->fields('d');
+
+  if ($currency_codes) {
+    $currency_ids = commerce_pos_currency_denomination_get_currency_id($currency_codes);
+    $query = $query->condition('currency_id', $currency_ids, 'IN');
+  }
+  $results = $query->execute();
+
+  // Let's organize them by currency id and then, by denomination id.
+  foreach ($results as $result) {
+    $denominations[$result->currency_id][$result->denomination_id] = $result;
+  }
+
+  return $denominations;
+}
+
+/**
+ * Returns the configured currency denomination types.
+ *
+ * @param array $currency_codes
+ *   An array of currency codes.
+ *
+ * @return array
+ *   Returns the denomination types from the db keyed on the currency ID.
+ */
+function commerce_pos_currency_denomination_get_currency_types($currency_codes = array()) {
+  $denomination_types = array();
+
+  $query = db_select('commerce_pos_currency_denomination_type', 't');
+  $query = $query->fields('t');
+
+  if ($currency_codes) {
+    $query = $query->condition('currency_code', $currency_codes, 'IN');
+  }
+
+  $results = $query->execute();
+
+  // Let's organize them by currency id.
+  foreach ($results as $result) {
+    $denomination_types[$result->currency_id] = $result;
+  }
+
+  return $denomination_types;
+}
+
+/**
+ * Returns the configured currency denomination types.
+ *
+ * @param array $currency_ids
+ *   An array of currency id.
+ *
+ * @return array
+ *   Returns the denomination types from the db keyed on the currency ID.
+ */
+function commerce_pos_currency_denomination_get_currency_types_from_id($currency_ids = array()) {
+  $denomination_types = array();
+
+  $query = db_select('commerce_pos_currency_denomination_type', 't');
+  $query = $query->fields('t');
+
+  if ($currency_ids) {
+    $query = $query->condition('currency_id', $currency_ids, 'IN');
+  }
+
+  $results = $query->execute();
+
+  // Let's organize them by currency id.
+  foreach ($results as $result) {
+    $denomination_types[$result->currency_id] = $result;
+  }
+
+  return $denomination_types;
+}
+
+/**
+ * Returns the currency ID given currency codes.
+ *
+ * @param array $currency_codes
+ *   An array of currency codes.
+ *
+ * @return array
+ *   Returns the currency info from the db keyed on the currency code.
+ */
+function commerce_pos_currency_denomination_get_currency_id($currency_codes) {
+  $currency_ids = db_select('commerce_pos_currency_denomination_type', 't')
+    ->fields('t', array('currency_code', 'currency_id'))
+    ->condition('currency_code', $currency_codes, 'IN')
+    ->execute()
+    ->fetchAllKeyed(0, 1);
+
+  return $currency_ids;
+}
+
+/**
+ * Get the denomination info from the db given a denomination ID.
+ *
+ * @param int $denomination_id
+ *   The denomination ID.
+ *
+ * @return array
+ *   Returns the result from the db in an array keyed by the denomination ID.
+ */
+function commerce_pos_currency_denomination_get_denomination($denomination_id) {
+  $denomination = array();
+
+  // Let's first grab all the denominations under the given currency codes.
+  $query = db_select('commerce_pos_currency_denomination', 'd');
+  $query->fields('d');
+
+  if ($denomination_id) {
+    $query = $query->condition('denomination_id', $denomination_id);
+  }
+  $results = $query->execute();
+
+  // Let's organize them by denomination id.
+  foreach ($results as $result) {
+    $denomination[$result->denomination_id] = $result;
+  }
+
+  return $denomination;
+}
+
+/**
+ * Custom function to check if a denomination name already exists in the table.
+ *
+ * @param $value
+ *   The value to check for.
+ *
+ * @return mixed
+ *   Returns 1 if it exists.
+ */
+function commerce_pos_currency_denomination_name_exists($value) {
+  $custom_exists = db_query_range('SELECT 1 FROM {commerce_pos_currency_denomination} WHERE denomination_name = :name', 0, 1, array(':name' => $value))->fetchField();
+
+  return $custom_exists;
+}
diff --git a/modules/currency_denomination/css/commerce_pos_currency_denomination.css b/modules/currency_denomination/css/commerce_pos_currency_denomination.css
new file mode 100644
index 0000000..3a8c52d
--- /dev/null
+++ b/modules/currency_denomination/css/commerce_pos_currency_denomination.css
@@ -0,0 +1,3 @@
+#edit-commerce-pos-default-currency-denomination-types a {
+  font-size: 11px;
+}
diff --git a/modules/currency_denomination/includes/commerce_pos_currency_denomination.admin.inc b/modules/currency_denomination/includes/commerce_pos_currency_denomination.admin.inc
new file mode 100644
index 0000000..0443a55
--- /dev/null
+++ b/modules/currency_denomination/includes/commerce_pos_currency_denomination.admin.inc
@@ -0,0 +1,359 @@
+<?php
+
+/**
+ * @file
+ * Admin-related callbacks and functions for commerce_pos_currency_denomination.
+ */
+
+/**
+ * The currency denomination admin settings form.
+ */
+function commerce_pos_currency_denomination_settings_form($form, &$form_state) {
+  // Add our add denomination type button.
+  $form['commerce_pos_add_denomination_type_button'] = array(
+    '#markup' => l(t('Add New Denomination Type'), 'admin/commerce/config/pos/denomination-type/add', array(
+      'attributes' => array('class' => array('button')),
+    ))
+  );
+
+  $denomination_options = array();
+  $denomination_types = commerce_pos_currency_denomination_get_currency_types();
+
+  // Format the denomination options for our form element.
+  foreach ($denomination_types as $type) {
+    $markup = $type->currency_code;
+    $markup .= ' ' . l(t('view'), 'admin/commerce/config/pos/denomination-type/' . $type->currency_id . '/denomination/view', array(
+        'attributes' => array('class' => array('view-denomination'))
+      ));
+    $markup .= ' | ' . l(t('add'), 'admin/commerce/config/pos/denomination-type/' . $type->currency_id . '/denomination/add', array(
+        'attributes' => array('class' => array('add-denomination'))
+      ));
+    if ($type->currency_code != 'USD') {
+      $markup .= ' | ' . l(t('delete'), 'admin/commerce/config/pos/denomination-type/' . $type->currency_id . '/delete', array(
+          'attributes' => array('class' => array('delete-denomination'))
+        ));
+    }
+    $denomination_options[$type->currency_code] = $markup;
+  }
+
+  $form['commerce_pos_default_currency_denomination_types'] = array(
+    '#title' => t('Set Default Currency Denominations'),
+    '#type' => 'checkboxes',
+    '#options' => $denomination_options,
+    '#required' => TRUE,
+    '#default_value' => variable_get('commerce_pos_default_currency_denomination_types', array('USD')),
+    '#description' => t('Select the currency denomination types that will be used in the system.'),
+  );
+
+  $form['actions']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save settings'),
+  );
+
+  $form['#attached']['css'][] = drupal_get_path('module', 'commerce_pos_currency_denomination') . '/css/commerce_pos_currency_denomination.css';
+
+  return $form;
+}
+
+/**
+ * Submit handler for the POS currency denomination settings form.
+ */
+function commerce_pos_currency_denomination_settings_form_submit($form, &$form_state) {
+  if (!empty($form_state['values']['commerce_pos_default_currency_denomination_types'])) {
+    variable_set('commerce_pos_default_currency_denomination_types', $form_state['values']['commerce_pos_default_currency_denomination_types']);
+  }
+}
+
+/**
+ * The form for adding new denomination types.
+ */
+function commerce_pos_currency_add_denomination_type_form($form, &$form_state) {
+  $form['commerce_pos_denomination_type_currency_code'] = array(
+    '#type' => 'textfield',
+    '#size' => 3,
+    '#maxlength' => 3,
+    '#default_value' => NULL,
+    '#title' => t('Denomination Type Currency Code'),
+    '#description' => t('Currency code should be in the following format: "USD".'),
+    '#required' => TRUE,
+  );
+
+  $form['actions']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+
+  return $form;
+}
+
+/**
+ * Validate handler for adding new denomination types.
+ */
+function commerce_pos_currency_add_denomination_type_form_validate($form, &$form_state) {
+  // Check if the denomination type already exists in the db.
+  $result = db_select('commerce_pos_currency_denomination_type', 't')
+    ->fields('t', array('currency_id'))
+    ->condition('currency_code', $form_state['values']['commerce_pos_denomination_type_currency_code'])
+    ->execute()
+    ->fetchField();
+
+  if ($result) {
+    form_set_error('', t('This denomination type already exists in the system.'));
+  }
+}
+
+/**
+ * Submit handler for adding new denomination types.
+ */
+function commerce_pos_currency_add_denomination_type_form_submit($form, &$form_state) {
+  db_insert('commerce_pos_currency_denomination_type')
+    ->fields(array(
+      'currency_code' => $form_state['values']['commerce_pos_denomination_type_currency_code']
+    ))
+    ->execute();
+
+  drupal_set_message(t('The denomination type has been successfully added.'));
+  drupal_goto('admin/commerce/config/pos/denomination');
+}
+
+/**
+ * Delete a denomination type.
+ */
+function commerce_pos_currency_delete_denomination_type_form($form, &$form_state, $currency_id) {
+  // Get the denomination type info.
+  $form_state['denomination_type_info'] = commerce_pos_currency_denomination_get_currency_types_from_id(array($currency_id));
+
+  // If the denomination type is part of the enabled denomination types, then,
+  // don't let the user delete it.
+  $configured_denom_types = variable_get('commerce_pos_default_currency_denomination_types');
+  if (isset($configured_denom_types[$form_state['denomination_type_info'][$currency_id]->currency_code])
+    && $configured_denom_types[$form_state['denomination_type_info'][$currency_id]->currency_code] === $form_state['denomination_type_info'][$currency_id]->currency_code) {
+    form_set_error('', t('This denomination type is currently enabled. Please disable it first before deleting.'));
+    return;
+  }
+
+  if (!empty($form_state['denomination_type_info'])) {
+    $form_state['denomination_type_info'] = $form_state['denomination_type_info'][$currency_id];
+
+    return confirm_form(
+      $form,
+      t('Are you sure you want to delete currency denomination type @type?', array(
+        '@type' => $form_state['denomination_type_info']->currency_code,
+      )),
+      'admin/commerce/config/pos/denomination',
+      t('All denominations under this type will be deleted. This action cannot be undone.'),
+      t('Delete'),
+      t('Cancel')
+    );
+  }
+  else {
+    form_set_error('', t('Invalid currency ID.'));
+  }
+
+  return $form;
+}
+
+/**
+ * Submit handler for deleting a denomination type.
+ */
+function commerce_pos_currency_delete_denomination_type_form_submit($form, &$form_state) {
+  if (isset($form_state['denomination_type_info'])) {
+    // First delete the denominations for that type.
+    db_delete('commerce_pos_currency_denomination')
+      ->condition('currency_id', $form_state['denomination_type_info']->currency_id)
+      ->execute();
+
+    // Now delete the denomination type.
+    db_delete('commerce_pos_currency_denomination_type')
+      ->condition('currency_id', $form_state['denomination_type_info']->currency_id)
+      ->execute();
+  }
+
+  drupal_set_message(t('The denomination type @type has been successfully deleted.', array(
+    '@type' => $form_state['denomination_type_info']->currency_code
+  )));
+  drupal_goto('admin/commerce/config/pos/denomination');
+}
+
+function commerce_pos_currency_view_denominations($currency_id) {
+  $output = '';
+
+  // Get the denomination type info.
+  $denomination_type_info = commerce_pos_currency_denomination_get_currency_types_from_id(array($currency_id));
+
+  if (!empty($denomination_type_info)) {
+    $denomination_type_info = $denomination_type_info[$currency_id];
+
+    $output .= l(t('Add Denomination'), 'admin/commerce/config/pos/denomination-type/' . $denomination_type_info->currency_id . '/denomination/add', array(
+      'attributes' => array('class' => array('add-denomination', 'button'))
+    ));
+
+    // Now, get the denominations for this denomination type.
+    $denominations = commerce_pos_currency_denomination_get_denominations(array($denomination_type_info->currency_code));
+    if (!empty($denominations)) {
+      $output .= t('<h3>Current Denominations for Type @type</h3>', array(
+        '@type' => $denomination_type_info->currency_code
+      ));
+
+      $headers = array(
+        'Title' => t('Title'),
+        'Amount' => t('Amount'),
+        'Options' => t('Options'),
+      );
+      $rows = array();
+
+      foreach ($denominations[$denomination_type_info->currency_id] as $denomination) {
+        $row = array();
+        $row[] = $denomination->denomination_title;
+        $row[] = $denomination->denomination_amount;
+        $row[] = l(t('delete'), 'admin/commerce/config/pos/denomination-type/' . $currency_id . '/denomination/' . $denomination->denomination_id . '/delete');
+        $rows[] = $row;
+      }
+
+      $output .= theme('table', array(
+          'header' => $headers,
+          'rows' => $rows,
+          'sticky' => TRUE,
+          'attributes' => array(
+            'class' => array('commerce-pos-current-denominations')
+          )
+        )
+      );
+    }
+    else {
+      $output .= t('<p>Currently, no denominations have been added for this denomination type.</p>');
+    }
+  }
+  else {
+    $output .= t('<p>Invalid denomination type.</p>');
+  }
+
+  return $output;
+}
+
+/**
+ * The form for adding a new denomination.
+ */
+function commerce_pos_currency_add_denomination_form($form, &$form_state, $currency_id) {
+  $form_state['currency_id'] = $currency_id;
+
+  // Get the denomination info for this type.
+  $form_state['denomination_type_info'] = commerce_pos_currency_denomination_get_currency_types_from_id(array($currency_id));
+
+  if (!empty($form_state['denomination_type_info'])) {
+    $form_state['denomination_type_info'] = $form_state['denomination_type_info'][$currency_id];
+
+    drupal_set_title(t('Add Denomination for Type @type', array(
+      '@type' => $form_state['denomination_type_info']->currency_code
+    )));
+
+    $form['commerce_pos_denomination_title'] = array(
+      '#type' => 'textfield',
+      '#size' => 50,
+      '#maxlength' => 50,
+      '#default_value' => NULL,
+      '#title' => t('Denomination Title'),
+      '#description' => t('Enter the denomination title eg. "Penny".'),
+      '#required' => TRUE,
+    );
+
+    $form['commerce_pos_denomination_name'] = array(
+      '#type' => 'machine_name',
+      '#title' => t('Denomination Name'),
+      '#default_value' => '',
+      '#maxlength' => 25,
+      '#description' => t('A unique denomination name eg. "penny".'),
+      '#machine_name' => array(
+        'exists' => 'commerce_pos_currency_denomination_name_exists',
+        'source' => array('commerce_pos_denomination_title'),
+      ),
+    );
+
+    $form['commerce_pos_denomination_amount'] = array(
+      '#type' => 'textfield',
+      '#size' => 10,
+      '#maxlength' => 10,
+      '#default_value' => NULL,
+      '#title' => t('Denomination Amount'),
+      '#description' => t('Enter the denomination amount eg. "1".'),
+      '#required' => TRUE,
+      '#element_validate' => array('element_validate_integer_positive'),
+    );
+
+    $form['actions']['submit'] = array(
+      '#type' => 'submit',
+      '#value' => t('Save'),
+    );
+  }
+  else {
+    form_set_error('', t('Invalid currency ID.'));
+  }
+
+  return $form;
+}
+
+/**
+ * Submit handler for adding a new denomination.
+ */
+function commerce_pos_currency_add_denomination_form_submit($form, &$form_state) {
+  db_insert('commerce_pos_currency_denomination')
+    ->fields(array(
+      'currency_id' => $form_state['currency_id'],
+      'denomination_name' => $form_state['values']['commerce_pos_denomination_name'],
+      'denomination_title' => $form_state['values']['commerce_pos_denomination_title'],
+      'denomination_amount' => $form_state['values']['commerce_pos_denomination_amount'],
+    ))
+    ->execute();
+
+  drupal_set_message(t('The denomination has been successfully added for type @type.', array(
+    '@type' => $form_state['denomination_type_info']->currency_code
+  )));
+  drupal_goto('admin/commerce/config/pos/denomination-type/' . $form_state['currency_id'] . '/denomination/view');
+}
+
+/**
+ * Delete a denomination.
+ */
+function commerce_pos_currency_delete_denomination_form($form, &$form_state, $currency_id, $denomination_id) {
+  $form_state['currency_id'] = $currency_id;
+
+  // Fetch the denomination info for this id.
+  $form_state['denomination_info'] = commerce_pos_currency_denomination_get_denomination($denomination_id);
+
+  if (!empty($form_state['denomination_info'])) {
+    $form_state['denomination_info'] = $form_state['denomination_info'][$denomination_id];
+
+    return confirm_form(
+      $form,
+      t('Are you sure you want to delete denomination @denomination?', array(
+        '@denomination' => $form_state['denomination_info']->denomination_title
+      )),
+      'admin/commerce/config/pos/denomination-type/' . $currency_id . '/denomination/view',
+      t('This action cannot be undone.'),
+      t('Delete'),
+      t('Cancel')
+    );
+  }
+  else {
+    form_set_error('', t('Invalid denomination ID.'));
+  }
+
+  return $form;
+}
+
+/**
+ * Submit handler for deleting a denomination.
+ */
+function commerce_pos_currency_delete_denomination_form_submit($form, &$form_state) {
+  if (isset($form_state['denomination_info'])) {
+    // Delete the denomination.
+    db_delete('commerce_pos_currency_denomination')
+      ->condition('denomination_id', $form_state['denomination_info']->denomination_id)
+      ->execute();
+  }
+
+  drupal_set_message(t('The denomination @denomination has been successfully deleted.', array(
+    '@denomination' => $form_state['denomination_info']->denomination_title
+  )));
+  drupal_goto('admin/commerce/config/pos/denomination-type/' . $form_state['currency_id'] . '/denomination/view');
+}
diff --git a/modules/keypad/commerce_pos_keypad.info b/modules/keypad/commerce_pos_keypad.info
index 28da0a6..8c6ee86 100644
--- a/modules/keypad/commerce_pos_keypad.info
+++ b/modules/keypad/commerce_pos_keypad.info
@@ -4,3 +4,4 @@ core = 7.x
 package = Commerce POS
 
 dependencies[] = commerce_pos
+dependencies[] = commerce_pos:commerce_pos_currency_denomination
diff --git a/modules/keypad/commerce_pos_keypad.module b/modules/keypad/commerce_pos_keypad.module
index 79acd6b..e24783b 100644
--- a/modules/keypad/commerce_pos_keypad.module
+++ b/modules/keypad/commerce_pos_keypad.module
@@ -17,6 +17,7 @@ function commerce_pos_keypad_theme($existing, $type, $theme, $path) {
       'variables' => array(
         'inputs' => array(),
         'currency_code' => '',
+        'denominations' => array(),
       ),
     ),
     'commerce_pos_keypad_keypad' => array(
@@ -84,11 +85,15 @@ function commerce_pos_keypad_pre_render($element) {
  *   The altered element.
  */
 function commerce_pos_keypad_pre_render_cash_input(array $element) {
+  // Get all the denominations that the user has configured for.
+  $denominations = commerce_pos_currency_denomination_get_denominations(variable_get('commerce_pos_default_currency_denomination_types', array('USD')));
+
   $element['#attached']['js'][] = array(
     'type' => 'setting',
     'data' => array(
       'commercePosKeypadCashInput' => array(
         'inputBox' => theme('commerce_pos_keypad_cash_input_box', array(
+          'denominations' => $denominations,
           'currency_code' => isset($element['#commerce_pos_keypad']['currency_code']) ? $element['#commerce_pos_keypad']['currency_code'] : commerce_default_currency(),
         )),
       ),
diff --git a/modules/keypad/theme/commerce_pos_keypad.theme.inc b/modules/keypad/theme/commerce_pos_keypad.theme.inc
index 328715a..23d6e2d 100644
--- a/modules/keypad/theme/commerce_pos_keypad.theme.inc
+++ b/modules/keypad/theme/commerce_pos_keypad.theme.inc
@@ -9,46 +9,13 @@
  * Implements template_preprocess_commerce_pos_keypad_cash_input_box().
  */
 function commerce_pos_keypad_preprocess_commerce_pos_keypad_cash_input_box(&$variables) {
-  $variables['inputs'] = array(
-    'penny' => array(
-      'title' => t('Penny'),
-      'amount' => 1,
-    ),
-    'nickel' => array(
-      'title' => t('Nickel'),
-      'amount' => 5,
-    ),
-    'dime' => array(
-      'title' => t('Dime'),
-      'amount' => 10,
-    ),
-    'quarter' => array(
-      'title' => t('Quarter'),
-      'amount' => 25,
-    ),
-    '1' => array(
-      'title' => t('$1'),
-      'amount' => 100,
-    ),
-    '5' => array(
-      'title' => t('$5'),
-      'amount' => 500,
-    ),
-    '10' => array(
-      'title' => t('$10'),
-      'amount' => 1000,
-    ),
-    '20' => array(
-      'title' => t('$20'),
-      'amount' => 2000,
-    ),
-    '50' => array(
-      'title' => t('$50'),
-      'amount' => 5000,
-    ),
-    '100' => array(
-      'title' => t('$100'),
-      'amount' => 10000,
-    ),
-  );
+  $variables['inputs'] = array();
+  foreach ($variables['denominations'] as $currency_id => $result) {
+    foreach ($result as $denomination_id => $denomination) {
+      $variables['inputs'][$denomination->denomination_name] = array(
+        'title' => $denomination->denomination_title,
+        'amount' => $denomination->denomination_amount,
+      );
+    }
+  }
 }
