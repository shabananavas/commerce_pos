<?php

/**
 * @file
 * Hook implementations and related functions.
 */

/**
 * Implements hook_theme().
 */
function commerce_pos_keypad_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_pos_keypad_cash_input_box' => array(
      'path' => $path . '/theme',
      'file' => 'commerce_pos_keypad.theme.inc',
      'template' => 'commerce-pos-keypad-cash-input-box',
      'variables' => array(
        'inputs' => array(),
        'currency_code' => '',
        'denominations' => array(),
      ),
    ),
    'commerce_pos_keypad_keypad' => array(
      'path' => $path . '/theme',
      'file' => 'commerce_pos_keypad.theme.inc',
      'template' => 'commerce-pos-keypad-keypad',
      'variables' => array(
        'input_type' => 'text',
      ),
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 */
function commerce_pos_keypad_element_info_alter(&$type) {
  $form_elements = array('textfield', 'password');

  foreach ($form_elements as $element) {
    $type[$element]['#pre_render'][] = 'commerce_pos_keypad_pre_render';
  }
}

/**
 * Attach JS and CSS to elements as needed.
 */
function commerce_pos_keypad_pre_render($element) {
  // Only preprocess items with #commerce_pos_keypad set.
  if (isset($element['#commerce_pos_keypad'])) {
    $element['#attached']['css'][] = drupal_get_path('module', 'commerce_pos_keypad') . '/css/commerce_pos_keypad.css';
    $element['#attached']['js'][] = drupal_get_path('module', 'commerce_pos_keypad') . '/js/commerce_pos_keypad.js';

    // Allow 'type' to be optional by providing a default.
    if (isset($element['#commerce_pos_keypad']['type'])) {
      switch ($element['#commerce_pos_keypad']['type']) {
        case 'cash input':
          $element = commerce_pos_keypad_pre_render_cash_input($element);
          break;

        case 'keypad':
          $element = commerce_pos_keypad_pre_render_keypad($element);
          break;

        default:
          $element = commerce_pos_keypad_pre_render_keypad($element);
          break;
      }
    }
    else {
      $element = commerce_pos_keypad_pre_render_keypad($element);
    }
  }

  return $element;
}

/**
 * Alter a form element to add a cash input box to it.
 *
 * @param array $element
 *   The form element to alter.
 *
 * @return array
 *   The altered element.
 */
function commerce_pos_keypad_pre_render_cash_input(array $element) {
  // Get all the denominations that the user has configured for.
  $denominations = commerce_pos_currency_denomination_get_denominations(variable_get('commerce_pos_default_currency_denomination_types', array('USD')));

  $element['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'commercePosKeypadCashInput' => array(
        'inputBox' => theme('commerce_pos_keypad_cash_input_box', array(
          'denominations' => $denominations,
          'currency_code' => isset($element['#commerce_pos_keypad']['currency_code']) ? $element['#commerce_pos_keypad']['currency_code'] : commerce_default_currency(),
        )),
      ),
    ),
  );
  $element['#attributes']['class'][] = 'commerce-pos-keypad-cash-input';

  return $element;
}

/**
 * Alter a form element to add a keypad to it.
 *
 * @param array $element
 *   The form element to alter.
 *
 * @return array
 *   The altered element.
 */
function commerce_pos_keypad_pre_render_keypad(array $element) {
  $js = array(
    'type' => 'setting',
    'data' => array(
      'commercePosKeypadKeypad' => array(
        'inputBox' => theme('commerce_pos_keypad_keypad', array(
          'input_type' => ($element['#type'] == 'password') ? 'password' : 'text',
        )),
      ),
    ),
  );

  // If events were declared, add them to the settings.
  if (isset($element['#commerce_pos_keypad']['events'])) {
    foreach ($element['#commerce_pos_keypad']['events'] as $selector => $events) {
      foreach ($events as $event_name => $event_properties) {
        $js['data']['commercePosKeypadKeypad']['events'][] = array(
          'selector' => $selector,
          'name' => $event_name,
          'properties' => $event_properties,
        );
      }
    }
  }
  else {
    // Add default "blur" event.
    $js['data']['commercePosKeypadKeypad']['events'][] = array('name' => 'blur', 'properties' => array());
  }

  $element['#attached']['js'][] = $js;

  $element['#attributes']['class'][] = 'commerce-pos-keypad-keypad';

  return $element;
}
